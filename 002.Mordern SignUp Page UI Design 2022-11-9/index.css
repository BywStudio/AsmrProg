/* 网址：https://fonts.google.com/，搜索ubuntu，Dalton Maag,8styles */
@import url('https://fonts.googleapis.com/css2?family=Ubuntu:ital,wght@0,300;0,400;0,500;0,700;1,300;1,400;1,500;1,700&display=swap');

/* 对整体页面样式开始设计模式 */
* {
    box-sizing: border-box;
}
html {
    height: 100%;
}
body {
    height: 100%;
    /* display: grid，一种网格布局方式 grid：该元素的行为类似块级元素并且根据网格模型布局它的内容。 */
    display: grid;
    /* place-items: center;center沿着中心轴线对齐 */
    place-items: center;
    /* 所有 4 个外边距都是 0 */
    margin: 0;
    /* 上边下边 | 左边右边 */
    padding: 0 32px;
    background-color: #f5f5f5;
    font-family: "Ubuntu";
    /* animation: name duration timing-function delay iteration-count direction fill-mode; */
    /* name旋转，持续时间6s，动画在每个周期的持续时间内无限进行，线性方向进行 */
    animation: rotate 6s infinite alternate linear;
}


/* 左上角、右下角扇形 */
.circle {
    /* fixed：元素会被移出正常文档流，并不为元素预留空间
    而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。 */
    position: fixed;
    /* top的效果取决于元素的position属性： */
    /* vmin：相对长度单位，视口最小（vmin）和视口最大（vmax）的单位，是基于 vw 和 vh 的值。 */
    /* 1vmin 是视口最小尺寸的 1%，而 1vmax 是视口最大尺寸的 1%。 */
    /* 想象一个宽 1200 像素、高 600 像素的浏览器窗口。
    在这种情况下，1vmin 是 6px（vh 的 1%，即 600 像素时较小值）。
    同时，1vmax 是 12px（vh 的 1%，即 1200 像素时的较大值）。 */
    top: -50vmin;
    left: -50vmin;
    width: 100vmin;
    height: 100vmin;
    /* 47%、45%是左上角，53%、51%是右上角，61%、49%是右下角，39%、55%是左下角 */
    /* border-radius: 47% 53% 61% 39% / 45% 51% 49% 55%; */
    border-radius: 50% ;
    background: #65c8ff;
}

.circle::after {
    content: "";
    position: inherit;
    right: -50vmin;
    bottom: -50vmin;
    /* width: inherit;
    height: inherit; */
    width: 100vmin;
    height: 100vmin;
    /* border-radius: inherit; */
    border-radius: 50% ;
    background: #143d81;
}

.card {
    overflow: hidden;
    position: absolute;
    /* z-index 属性设置定位元素及其后代元素或 flex 项目的 Z 轴顺序。
    z-index 较大的重叠元素会覆盖较小的元素。 */
    z-index: 3;
    /* width: 100%; */
    /* margin: 0 20px; */
    /* padding三值：上边 | 左边右边 | 下边 */
    padding: 160px 30px 38px;
    /* em 和 rem 分别相对于父元素和根元素的字体大小。 */
    border-radius: 1.25rem;
    background: #fff;
    text-align: center;
    box-shadow: 0 100px 100px rgb(0 0 0 / 10%);
}

/* 其实是用before伪类在.card前面又插入了一个盒子内容 */
.card::before {
    /* content CSS 属性用于在元素的 ::before 和 ::after 伪元素中插入内容。 */
    content: "";
    position: absolute;
    background: #216ce7;
    /* 在w1000+h1000的盒子里,使用圆角50%画了一个圆,向上移除.card这个父级盒子界面之外880px。
    盒子里还有高度120的内容 */
    top: -880px;
    /* left: 50%; */
    width: 1000px;
    height: 1000px;
    border-radius: 50%;
    /* 两个 <length> 或 <percentage> 表示在二维上分别按照指定 X 轴和 Y 轴的值进行的平移。
    等同于在 translate() 函数（2D 平移）中函数指定两个值。 
    -50%表示x轴向右平移，y轴上的负值是向上平移*/
    translate: -50% 0;
}

.card .logo {
    position: absolute;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    background-color: #fff;
    width: 64px;
    height: 64px;
    /* 控制图标的位置移动 */
    top: 30px;
    left: 50%;
    translate: -50% 0;
}

.card .logo i {
    font-size: 50px;
    color: #216ce7;
    font-weight: 500;
}
.card>h2 {
    font-size: 22px;
    font-weight: 400;
    margin: 0 0 30px;
    color: #2a3444;
}

.form {
    margin: 0 0 30px;
    display: grid;
    /* gap用于设置grid网络布局设置行与列之间的间隙 18px是行间距,
    因为只有一列所以列间距无法设置*/
    gap: 18px;
}

.form>input, .form>button {
    width: 100%;
    height: 50px;
    border-radius:28px ;
}
.form>input {
    border: 2px solid #e0e0e0;
    font-family: inherit;
    font-size: 16px;
    /* padding两值： 上边下边 | 左边右边 */
    padding: 0 24px;
    color: #11274c;
    /* transition:过渡效果可以为一个元素在不同状态之间切换的时候定义不同的过渡效果。 */
    /* transition: all 0.375s; */
    
}

.form>input:hover {
    border: 2px solid #000;
    
}

.form>input::placeholder {
    color: #cac8c8;
}

.form>button {
    /* 设置光标的类型（如果有），在鼠标指针悬停在元素上时显示相应样式。
    这里设置的是一个手指的形状，最常用的 */
    cursor: pointer;
    /* width: 100%;
    height: 50px; */
    padding: 0 16px;
    background: #216ce7;
    color: #f9f9f9;
    /* 去除边框线 */
    border: 0;
    font-family: inherit;
    font-size: 1rem;
    font-weight: 600;
    text-align: center;
    letter-spacing: 2px;
    /* transition: all 0.375s; */
}

.form>button:hover {
    color: #fff;
    background-color: #143d81;
}

.card>footer {
    color: #7c7c7c;
    transition: all 0.375s;
}
.card>footer>a {
    color: #216ce7;
    transition: all 0.375s;
}

.card>footer>a:hover {
    color: #143d81;
}

/* 可用于基于一个或多个媒体查询的结果来应用样式表的一部分。
使用它，你可以指定一个媒体查询和一个 CSS 块，
当且仅当该媒体查询与正在使用其内容的设备匹配时，该 CSS 块才能应用于该文档。 */
@media (width >=500px){
    body {
        padding: 0;
    }
    .card {
        margin: 0;
        width: 360px;
    }
}